language: python

env:
  global:
    secure: LrcmidxI4ngzv4YTEceD6Yt3lVjgJi0KhgIHWTW9lN2h9ZQdJhLL9nzc8NPblbKvRkbniGPblozY4L1Wn4ZwdRX18Tz9n4rOUB4HOm7DJHSFt9uEG75R8iNgnkoSfSGTW0rlGIm648PDnO+lRllmiBo5Pkqj2aSBNo/fnEKRpI4=

# Install packages for cross-compilation to 32 Bit
addons:
  apt:
    packages:
    - gcc-multilib
    - g++-multilib
    - lib32z1

matrix:
  include:
      # test that the documentation can be built from the tarball -- we
      # automatically build it from github master all the time, but downstream
      # packaging will use the tarball as the basis
#    - python: "2.7"
#      env: DOCS_ONLY=yes
#    - python: "2.7"
#      env: STANDALONE=no CYTHON=yes MINIMAL_VERSIONS=no REPORT_COVERAGE=yes
#    - python: "2.7"
#      env: STANDALONE=no CYTHON=yes MINIMAL_VERSIONS=yes REPORT_COVERAGE=no
#    - python: "3.3"
#      env: STANDALONE=no CYTHON=yes MINIMAL_VERSIONS=no REPORT_COVERAGE=no
#    - python: "3.3"
#      env: STANDALONE=no CYTHON=yes MINIMAL_VERSIONS=yes REPORT_COVERAGE=no
#    - python: "3.4"
#      env: STANDALONE=no CYTHON=yes MINIMAL_VERSIONS=no REPORT_COVERAGE=no
#    - python: "2.7"
#      env: STANDALONE=yes CYTHON=no MINIMAL_VERSIONS=no REPORT_COVERAGE=no
#    - python: "2.7"  # test without installed cython
#      env: STANDALONE=no CYTHON=no MINIMAL_VERSIONS=no REPORT_COVERAGE=no
    - python: "2.7"
      env: CONDA_BUILD=yes CONDA_PY="27" CONDA_NPY="19" ARCHITECTURE="x86_64"
    - python: "3.4"
      env: CONDA_BUILD=yes CONDA_PY="34" CONDA_NPY="19" ARCHITECTURE="x86_64"
    - python: "2.7"
      env: CONDA_BUILD=yes CONDA_PY="27" CONDA_NPY="19" ARCHITECTURE="x86"
    - python: "3.4"
      env: CONDA_BUILD=yes CONDA_PY="34" CONDA_NPY="19" ARCHITECTURE="x86"

# Use miniconda to install binary versions of numpy etc. from continuum
# analytic's repository. Follows an approach described by Dan Blanchard:
# https://gist.github.com/dan-blanchard/7045057
before_install:
- if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then
    wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-$ARCHITECTURE.sh -O miniconda.sh;
    else
    wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-$ARCHITECTURE.sh -O miniconda.sh;
  fi
- chmod +x miniconda.sh
# When we are installing the 32 Bit conda on a 64 Bit system, the miniconda
# installer will ask for a "yes" despite the -b flag, so we pipe in a yes
- yes | ./miniconda.sh -b
- if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then export PATH=/home/travis/miniconda/bin:$PATH; else export PATH=/home/travis/miniconda3/bin:$PATH; fi
# The next couple lines fix a crash with multiprocessing on Travis and are not specific to using Miniconda
- sudo rm -rf /dev/shm
- sudo ln -s /run/shm /dev/shm

# command to install dependencies
install:
  - conda update --yes conda
  - if [[ $CONDA_BUILD == 'yes' ]]; then
       conda install --yes --quiet binstar conda-build jinja2 pip setuptools;
    else
      if [[ $MINIMAL_VERSIONS == 'yes' ]]; then
      conda create -n travis_conda --yes pip python=$TRAVIS_PYTHON_VERSION numpy==1.8.0 scipy==0.13.3 nose sphinx ipython sympy==0.7.6 jinja2==2.7 pyparsing setuptools;
      else
      conda create -n travis_conda --yes pip python=$TRAVIS_PYTHON_VERSION numpy scipy nose sphinx ipython sympy pyparsing jinja2 setuptools;
      fi;
      source activate travis_conda;
      if [[ $CYTHON == 'yes' ]]; then conda install --yes cython; SETUP_ARGS=--with-cython; else SETUP_ARGS=''; fi;
      pip install -q coveralls;
      python setup.py install $SETUP_ARGS --fail-on-error;
      if [[ $DOCS_ONLY == 'yes' ]]; then
        pip install -q sphinxcontrib-issuetracker;
        python setup.py sdist;
      fi;
    fi

# command to run tests (make sure to not run it from the source directory)
script:
- if [[ $DOCS_ONLY == 'yes' ]]; then
    cd dist;
    tar xvzf *.tar.gz;
    cd Brian2*;
    mkdir docs;
    sphinx-build docs_sphinx docs;
  elif [[ $CONDA_BUILD == 'yes' ]]; then
    conda build dev/conda-recipe --quiet;
  else
    export SRCDIR=$(pwd);
    if [[ $STANDALONE == 'yes' ]]; then
      SCRIPTFILE=$SRCDIR/dev/tools/run_nose_tests_standalone.py;
    else
      SCRIPTFILE=$SRCDIR/dev/tools/run_nose_tests.py;
    fi;
    cd ~;
    coverage run --rcfile=$SRCDIR/.coveragerc $SCRIPTFILE;
  fi

after_success:
- if [[ $CONDA_BUILD == 'yes' ]]; then
    python dev/continuous-integration/move-conda-package.py dev/conda-recipe &&
    python dev/continuous-integration/binstar-push.py;
  elif [[ $REPORT_COVERAGE == 'yes' ]]; then
    cp .coverage $SRCDIR;
    cd $SRCDIR;
    coveralls;
  fi

notifications:
  email: false

